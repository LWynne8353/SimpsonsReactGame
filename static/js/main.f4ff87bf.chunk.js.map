{"version":3,"sources":["components/SimpsonsCard/index.js","components/Title/index.js","components/CounterCard/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["SimpsonsCard","props","className","onClick","randomize","id","alt","image","src","Title","children","Counter","Wrapper","App","state","simpsons","clickedCharacter","counter","topScore","shuffle","console","log","trackingScore","includes","reset","newChars","push","setState","shuffledSimpsons","sort","a","b","Math","random","this","map","characters","key","Component","ReactDOM","render","document","getElementById"],"mappings":"m2DAeeA,MAXf,SAAsBC,GAClB,OACI,4BAAI,yBAAKC,UAAU,UACf,yBAAKA,UAAU,OAAOC,QAAS,WAAQF,EAAMG,UAAUH,EAAMI,MACzD,yBAAKC,IAAKL,EAAMM,MAAOC,IAAKP,EAAMM,MAAOL,UAAU,sB,MCDpDO,MAJf,SAAeR,GACX,OAAO,wBAAIC,UAAU,SAASD,EAAMS,W,MCGzBC,MAJf,SAAiBV,GACb,OAAO,wBAAIC,UAAU,WAAWD,EAAMS,W,MCG3BE,MAJf,SAAiBX,GACb,OAAO,wBAAIC,UAAU,WAAWD,EAAMS,W,OC2G3BG,E,2MAvGbC,MAAQ,CACNC,WACAC,iBAAkB,GAClBC,QAAS,EACTC,SAAU,G,EAIZd,UAAY,SAAAC,GACV,EAAKc,UACLC,QAAQC,IAAI,YACZD,QAAQC,IAAIhB,GAGZ,IAAIiB,EAAgB,EAAKR,MAAMG,QAE/B,GAAK,EAAKH,MAAME,iBAAiBO,SAASlB,GAexC,EAAKmB,YAfwC,CAC7C,IAAMC,EAAW,EAAKX,MAAME,iBAC5BS,EAASC,KAAKrB,GACdiB,GAAgC,EAGhC,EAAKK,SAAS,CACZX,iBAAkBS,EAClBR,QAASK,IAEXF,QAAQC,IAAIC,GACZF,QAAQC,IAAI,EAAKP,MAAME,oB,EA0C3BG,QAAU,WACR,IAAMS,EAAmB,EAAKd,MAAMC,SAASc,MAAK,SAAUC,EAAGC,GAAK,MAAO,GAAMC,KAAKC,YACtF,EAAKN,SAAS,CACZZ,SAAUa,K,wEAOJ,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,6BACA,6BACE,kBAAC,EAAD,cACCM,KAAKpB,MAAMG,SAEd,yBAAKf,UAAU,OACZgC,KAAKpB,MAAMC,SAASoB,KAAI,SAAAC,GAAU,OACjC,kBAAC,EAAD,CACE7B,MAAO6B,EAAW7B,MAClBF,GAAI+B,EAAW/B,GACfgC,IAAKD,EAAW/B,GAChBD,UAAW,kBAAM,EAAKA,UAAUgC,EAAW/B,gB,GA9FvCiC,aCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f4ff87bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction SimpsonsCard(props) {\r\n    return (\r\n        <h5><div className=\"col s3\" >\r\n            <div className=\"card\" onClick={() => { props.randomize(props.id)}}>\r\n                <img alt={props.image} src={props.image} className=\"img-container\" />\r\n            </div>\r\n        </div>\r\n        </h5>\r\n    )\r\n\r\n}\r\nexport default SimpsonsCard;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n    return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Counter(props) {\r\n    return <h1 className=\"Counter\">{props.children}</h1>;\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <h1 className=\"Wrapper\">{props.children}</h1>;\r\n}\r\n\r\nexport default Wrapper;\r\n\r\n","import React, { Component } from 'react';\nimport SimpsonsCard from \"./components/SimpsonsCard\";\nimport Title from \"./components/Title\";\nimport Counter from \"./components/CounterCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport simpsons from \"./simpsons.json\";\n\nclass App extends Component {\n  state = {\n    simpsons,\n    clickedCharacter: [],\n    counter: 0,\n    topScore: 0\n  };\n\n  //function to shuffle cards randomly\n  randomize = id => {\n    this.shuffle();\n    console.log(\"Clicked!\")\n    console.log(id)\n\n    //variable to update score \n    let trackingScore = this.state.counter;\n    //if statement to allow it to update\n    if (!this.state.clickedCharacter.includes(id)) {\n      const newChars = this.state.clickedCharacter;\n      newChars.push(id);\n      trackingScore = trackingScore + 1;\n     \n      //counter increase\n      this.setState({\n        clickedCharacter: newChars,\n        counter: trackingScore\n      });\n      console.log(trackingScore)\n      console.log(this.state.clickedCharacter)\n    }\n    else {\n      // this.state.clickedCharacter.push(id)\n      this.reset()\n      // console.log (zero)\n\n\n      //Game over\n      //counter stops\n    }\n    // const countSimpsons = this.state.simpsons.map(characters => {\n    //   if (id === characters.id) {\n    //     if (characters.clicked === true) {\n    //       alert(\"player lost\")\n    //     }\n    //     else if (characters.clicked === true){\n\n    //         // incrementCount(\n    //         //   count = this.setState.simpsons + 1\n    //         // );\n    //       }\n\n    //       return characters;\n    //     };\n\n    // this.setState({\n    //   simpsons: countSimpsons\n    // });\n\n    // console.log(this.state.simpsons);\n\n    // map over the simpsons state array -- done\n    // within the map do an if(id === characters.id) -- done\n    // if characters.clicked is already true, you lose -- done\n    // else set characters.clicked to true -- done\n    // also increase the score\n    // after that, update the state with the new list of characters\n    // then shuffle again\n    // })\n  }\n\n  shuffle = () => {\n    const shuffledSimpsons = this.state.simpsons.sort(function (a, b) { return 0.5 - Math.random() });;\n    this.setState({\n      simpsons: shuffledSimpsons\n    })\n    // onClick = () => {\n    //   const eggScore = this.state.counter.reset()};\n    \n }\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Simpsons Memory Game</Title>\n        <div>\n          <Counter>Score</Counter>\n          {this.state.counter}\n        </div>\n        <div className=\"row\">\n          {this.state.simpsons.map(characters => (\n            <SimpsonsCard\n              image={characters.image}\n              id={characters.id}\n              key={characters.id}\n              randomize={() => this.randomize(characters.id)}\n            />\n\n          ))}\n        </div>\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}